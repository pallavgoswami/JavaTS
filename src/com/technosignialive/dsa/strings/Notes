Strings are immutable in Java
    i. once a string is declared we cannot change the object but forcefully if we try a new object will be created rather than changing the original one.

Why are they immutable?
    It might be possible that more than one reference variable refers to the same object in SCP (String Constant Pool). it will affect other reference variable and
    that is why string is immutable

    When we create a string using the new keyword, it allocates the memory in the heap area AND in the SCP as well
    Next time if we create a same object using string literal then it will use the same one created previously.

    To calculate the length of array we use .length variable but in strings we use .length() method


In Java, the String class is a part of the java.lang package and provides a wide range of methods for string manipulation. Here is a comprehensive list of the methods available in the String class:

1. Character and Substring Extraction
char charAt(int index) - Returns the character at the specified index.
String substring(int beginIndex) - Returns a substring from the specified index to the end.
String substring(int beginIndex, int endIndex) - Returns a substring between the specified indices.
2. Length and Empty Check
int length() - Returns the length of the string.
boolean isEmpty() - Returns true if the string is empty (length() == 0).
boolean isBlank() - Returns true if the string is empty or contains only whitespace (Java 11+).
3. String Comparison
boolean equals(Object another) - Compares two strings for equality.
boolean equalsIgnoreCase(String another) - Compares two strings, ignoring case differences.
int compareTo(String another) - Compares two strings lexicographically.
int compareToIgnoreCase(String another) - Compares two strings lexicographically, ignoring case.
boolean regionMatches(...) - Tests if two string regions are equal.
4. Search Operations
int indexOf(char ch) - Returns the index of the first occurrence of the specified character.
int indexOf(char ch, int fromIndex) - Returns the index of the first occurrence of the specified character, starting from the given index.
int indexOf(String str) - Returns the index of the first occurrence of the specified substring.
int indexOf(String str, int fromIndex) - Returns the index of the specified substring, starting from the given index.
int lastIndexOf(char ch) - Returns the index of the last occurrence of the specified character.
int lastIndexOf(String str) - Returns the index of the last occurrence of the specified substring.
5. String Modification
String concat(String str) - Concatenates the specified string to the end of this string.
String replace(char oldChar, char newChar) - Replaces all occurrences of a character.
String replace(CharSequence target, CharSequence replacement) - Replaces all occurrences of a substring.
String replaceAll(String regex, String replacement) - Replaces each substring that matches the given regex.
String replaceFirst(String regex, String replacement) - Replaces the first substring that matches the given regex.
String trim() - Removes leading and trailing whitespace.
String strip() - Removes leading and trailing whitespace (Java 11+).
String stripLeading() - Removes leading whitespace (Java 11+).
String stripTrailing() - Removes trailing whitespace (Java 11+).
String toUpperCase() - Converts all characters to uppercase.
String toLowerCase() - Converts all characters to lowercase.
String repeat(int count) - Returns a string whose value is the concatenation of this string repeated count times (Java 11+).
6. Whitespace and Splitting
String[] split(String regex) - Splits the string around matches of the regex.
String[] split(String regex, int limit) - Splits the string around matches of the regex, up to the specified limit.
String join(CharSequence delimiter, CharSequence... elements) - Joins multiple strings with a delimiter.
String join(CharSequence delimiter, Iterable<? extends CharSequence> elements) - Joins elements of an iterable with a delimiter.
7. Checking Content
boolean contains(CharSequence sequence) - Returns true if the string contains the specified sequence.
boolean startsWith(String prefix) - Checks if the string starts with the specified prefix.
boolean startsWith(String prefix, int toffset) - Checks if the substring starts with the specified prefix.
boolean endsWith(String suffix) - Checks if the string ends with the specified suffix.
boolean matches(String regex) - Tells whether the string matches the given regular expression.
8. Character Array Operations
char[] toCharArray() - Converts the string to a new character array.
void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin) - Copies characters into an array.
9. String Encoding and Decoding
byte[] getBytes() - Encodes the string into a sequence of bytes using the platform's default charset.
byte[] getBytes(String charsetName) - Encodes the string into a sequence of bytes using the specified charset.
String format(String format, Object... args) - Returns a formatted string using the specified format and arguments.
10. Utility Methods
static String valueOf(...) - Returns the string representation of the specified argument (overloaded for various types).
static String copyValueOf(char[] data) - Returns a string that represents the character array.
static String copyValueOf(char[] data, int offset, int count) - Returns a string that represents a subarray of the character array.
String intern() - Returns a canonical representation for the string object.
11. New Methods in Java 12+
String indent(int n) - Adjusts the indentation of each line in the string.
String transform(Function<String, R> f) - Applies a function to the string and returns the result.
Example Usage:
java
Copy code
public class StringMethodsExample {
    public static void main(String[] args) {
        String str = "Hello, World!";

        // Using some methods
        System.out.println(str.toUpperCase()); // HELLO, WORLD!
        System.out.println(str.substring(7)); // World!
        System.out.println(str.contains("World")); // true
        System.out.println(str.indexOf('o')); // 4
        System.out.println(str.replace("World", "Java")); // Hello, Java!
    }
}
This is a comprehensive list of methods available in the String class. If you need examples or explanations for specific methods, let me know!



StringBuffer
StringBuffer is an alternative for String class and StringBuffer represents a mutable character sequence.
StringBuffer class provides the synchronisation.
It provides much of the functionalities of String.

StringBuilder
StringBuilder is an alternative for String class and represents a mutable character sequence.
Does not provide guarantee of synchronisation that means it is not synchronised.
It also provides much of the functionalities of String.


