In Collection framework, we cannot use primitive data types, we need to use wrapper class.
This is because the collection framework is designed to work with objects, not primitive types.
Primitive data types are not objects; they are basic types.
Collections like ArrayList, HashSet, or HashMap require objects to store and manipulate data.

Wrapper Classes in Java
Java provides wrapper classes for each primitive type to allow their use in collections. Here are the mappings:

Primitive Type	    Wrapper Class
int	                Integer
double	            Double
char	            Character
boolean	            Boolean
float	            Float
byte	            Byte
short	            Short
long	            Long

Autoboxing: Automatic conversion of primitive types to their corresponding wrapper classes (e.g., int → Integer).
Unboxing: Automatic conversion of wrapper class objects to their corresponding primitive types (e.g., Integer → int).

If we create a list using Arrays.asList,it will create an unmodifiable list i.e. read-only list.
In other words, we cannot add or remove the elements from the list.


Map interface is used to store key-value pair.
The default size of HashMap is 16.
Map is an interface and HashMap, Linked HashMap, TreeMap are implementing class of a map.
Key should be unique, no duplicate keys are allowed.
One null key is allowed.
Multiple null values and duplicate values are allowed in map.